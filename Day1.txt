

System.out.println
class Sample
{
	public static void main(String args[])
	{
		System.out.println("hello");
		Jungle.lionKing.roar();
		CricketGround.sachin.hitSixer();
	}
}
class System
{
	static PrintStream out;// is a member here

}
class Jungle
{
	static Lion lionKing = new Lion();
	
}

class PrintStream
{
	void println(String str)
	{
	}

}
class Lion
{
	void roar()
	{
	}
}
class CricketGround
{
	static Cricketer sachin;

}
class Cricketer
{
	void hitSixer()
	{
	}
}
						Data types
							|
				-----------------------------------------------
				|									|
			primitive									secondary
				  |
	-----------------------------------------
	|			|			|		|
	Integral		Floating		Boolean	Character
	|			|			|		|
	byte  1		float  4	boolean 1		char 2
	short 2		double 8
	int   4
	long	 8

Mission : Clear M1 with 340 score

				who
				|role? clear M1, BU Round
			------------
			|		|
			where	when
			|space  +	|time = MIND
		------------------------
		|		|		|
		why		what		how
		|		|		|
		REASON  INFORMATION IMPLEMENTATION

   M  30 Java
1  T  31 Java
   W   1 Holiday
2  Th  2 Java
   F   3 Power Skill 0.25 Java
------------
   S   4 Solo Orientation
   Su  5 Holiday
------------
3  M   6 Java
4  T   7 Java
5  W   8 Java
6  Th  9 Java
7  F  10 Advanced Java
------------
   S  11 Generative AI
   Su 12
------------
   M  13 Power Skills 0.25, Advanced Java
   T  14 Holiday - 
8  W  15 Advanced Java
9  Th 16 Advanced Java
10 F  17 Advanced Java
-------------
11 S  18 Advanced Java 
   Su 19 Holiday
-------------
   M  20 Power Skills - full day
12 T	 21 dbms
   W     22 dbms
   T     23 MOCK OF M1 + DEVOPS
   F     24 JDBC + JPA HIBERNATE
   S   25 GENERATIVE AI
   S   26 HOLIDAY
M     27 M1
T     28 JDBC + JPA HIBERNATE
W     29 JDBC + JPA HIBERNATE
T     30 POWER SKILL FULL DAY





OOPS
------
Object Oriented programming system

POPS				vs		OOPS
|						|
procedure <-- data		data<---procedure

few global vars		object - sachin
	|				object - savingsAccount
few funsA				object - musician
main()B
few funsC


	object = state + behaviour
						
	savings	= acno	+ withdraw(){...}
	account	  acholder  deposit(){...}
			  actype    transferFunds(){...}
			  acbalance getBalance(){ ...}
					  changeName(){}
					changeAccType(){}

	sachin  = score + hitSixer(){}, hitFourRuns()
			age		hitOneRun(){}
			odi
			

				customerA
				  |
		+-----------+
		| cloth material
		|
shirt tailor
		|
		A measureCloth()

contract of a class
	= the concern of a data with its
		relevant functions
		|	datalist				|
		|B measureCustomerABody(){}	|
		|	data list is initialized	|
		|C makeACuttingDiagram		|
		|	AsPerTheMeasurements	|
		D cutTheClothIntoPieces
		E stitchIt
		E1 playingInDadsCabinAndScribbing()
		F pressIt
		G packIt
		I deliverIt
	yes no		yesno   noyes



class			vs			object
|							|
design of the "object"	instance of a "class"
	LOGICAL					PHYSICAL
	eg.						eg. 
	diagram 					the actual/	
	or a bluepring				real house(s)
	of a house
		
	paper/pencil				land, bricks	
	scale					building
	drawing material			material
							
class Cricketer
{
	void hit()
	{
	}
}	
	








OOPS
------
1. Abstraction
	-it is the "What is?" part of an object
	-hides the complexities of an object
	-provide the simple USAGE of the object
		using accessible functions

		Pattern.matches

		What is an ATM?
		- dispense the cash

	a. data level
	b. method level
	c. class level


	
2. Encapsulation
	- it is the "How is it?" part of an object
	- it codes the complexities of an object
	- data encapsulation
		- private data


3. Polymorphism
   ability of a business entity to have multiple forms
		a) class extension
		b) function overloading
		class Tiger
		{
			void jump() { }
			void jump(int height) { }
			void jump(int height, int length) { }
			void jump(float height) { }
			void jump(float height, int length) { }
			void jump(int height, float length) { }
		}
		c) function overriding
		d) operator overloading

4. Inheritance
		acquiring properties from existing business entities

		a. single level
			A
			|
			B

		b. multi level
			A
			|
			B
			|
			C

		c. multiple level*

			A		B
			|		|
			-----------
				|
				C

		from the above parent A and B, either 
		must be an interface

		A	B	   C		D
		|	<--- interfaces-->
		E

		class A
		{
		}
		interface B { }
		interface C { }
		interface D { }
		
		class E extends A implements B,C,D

			
		d. hierarchical level








5. Object communication



Generalization		vs	Specialization

"The height of your suceess cannot exceed
the height of your personal development"

Success = health + wealth + relationships + 
			mental peace
 
PD = 6 factors					u		

	class Point2D
	{
		
	}


				Association
					|
		-------------------------------
		|		|		|		|
		isA		hasA		usesA	producesA


class Vehicle
{
}
class Car extends Vehicle
{
}
class SedanCar extends Car
{
}


class School


{
}
class Library extends School
{
}
class Books extends Library
{
}

					Instrument
						|
			--------------------------
			|					|
		MusicalInstrument		MedicalInstrument
			|play()				|operate()
	--------------------		------------------
	|			|			|			|
	StringBased	AirBased	  Surgical	Pathological
	Musical		Musical	  Medical		Medical
	Instrument	Instrument  Instrument	Instrument
	|tuneString()	 |blowAir()	|sterilize()	 |count()
  --------	---------		----------	------------
  | 	    |	|	   |		|		|	|		|
Guitar Violin Flute Clarinet	Cutter Needle GlucoMeter ECGMachine
  |		|	|	     |	    |	|	|			|
Electric Cello Carnatic Sopranino |  Suture Continuous	  ECGAIMachine
Guitar		Flute		BoneCutter    GlucoMeter




		static		final		abstract
======================================================
	  |shared data  |it is a constant|
field  |across all   |that cannot be  |
	  |the objects  |changed         |
	  |of a class   |                |
------------------------------------------------------
	  |used to refer|it cann be over-|
method |other static |ridden by the   |
       |data/methods |child class     |
------------------------------------------------------
class  |defer        |cannot be extend|
       |             |ed/subclassed   |
------------------------------------------------------

	


class Test
{
	int i=100; //FIELD/instance members/data members

	void fun()
	{
		int i=90; // local variable
	}
	void foo()
	{
		int i=80;
		sop(i);
	}


}





Packages

	- to organize relevant classes into folders

	- similar to directories/folders on OS

	- package name must be in lower case

package com.vishal.dba;

class DriverManager
{
	int rollNumber;

		void openTheData()
		{
		}
}


	Folder


				jungle
				  |
			-------------------------------
			|	  |		|		|
			cave  river	tree		farm
			|	  |		|		|
		   Tiger  Frog		Parrot	FarmHouse
		   Lion	Fish		Monkey	Hen
								Dog

		1.        <-- default/accessible/friendly/package scope
		2. private 
		3. protected
		4. public 




-----------------------------------------------------

	JDBC 

	Java Database Connectivity


*following diagram is not of inheritance

1. decide the database [ mysql ]
2. accordingly decide the driver to connect to it
		download it from the net
			mysql-connectorj-8.0.33.jar 

application development:wq

	|
	Java[f/e]		Driver		Database [b/e]
	|						|	
	String					varchar
	float					int
	int						char
	byte
	show
	|						|
	business logic				data storage +
							data logic [ pl-sql]

1. DriverManager	- load the driver
		- registerDriver()

2. DriverManager- connect to the database
		- acquire the Connection
		- getConnection()

3. Create the desired statement
		insert/update/delete/select
		Statement [ select ]
		PreparedStatement [ insert / update / delete ]
		CallableStatement [ procedure / function ]

4. execute the statement
			executeQuery/executeUpdate
5. process the result if any


1. jdbc is a manual way to work with the 
		java and database activities

2. automated way - hibernate JPA
		[ no need to write the queries ]

	SavingsAccount sa = new SavingsAccount();
	sa.setters... to fill up the details

	jpa-> persist() / save()
		jpa will create the insert query
		and run as well


3. Spring JPA

	@Autowired
	SavingsAccounts sa;



				  
			  













table pojo  pojoInterface  pojoInterfaceImpl
	  1		2			3 [ repository ]



1. table - db layer - dept
		deptno dname loc
		10     Acc   NY
			..
		emp, customer, ord, item, product

product
--------
pid desc
101 tomato
102 onion
103 potato


price
-----
pid cost sdate    edate
101 40   01-01-25   -
101 50   01-11-24 31-12-24
101 80   01-09-24 30-10-24


2. Pojo - Entity - Component - bean - java class

package com.vishal.entity;
public class Department
{
	public Department() { } //no -arg
	private int departmentNumber;
	private String departmentName;
	private String departmentLocation;
		setter/getter;
}
						[ 1 Table - dept ]
			Restaurant|	[ 2 Pojo/Entity  ]
					|	Raw material
					Kitchen [ 3 Repository ]
					|  | Chef
					|  |
				------  |
				|       |
			Service Man [ 4 Service ]
						|
						|
		OrderTaker [ 5 Controller ]
		|
 Sister Brother
	Table <- MenuCard - [ 6 UI ] - Angular/React
 You Mom Dad


3. Repository 
		it allows CRUD operation on the table
		via the entities

		DAO LAYER

			data access object

		Department d1 = new Department();
		d1.setters 
		let me store it (SAVE)


File Handling
----------------

		keyboard				monitor/printer
		(reading)				(writing)
		input				output
		|					 |
		+-->->-->>your java->->->->
				application	
					| |
				+----+ |--------
				| -----+	|	|
				| |
				file	ram  n/w
java.io
------------------------------------------------------
  byte based				||     character based 
  stream					||	stream
  1 byte is a min unit or i/o || 2 bytes is a min unit 
						||  of i/o
-----------------------------------------------------
InputStream	|OutputStream	||	Reader  |	 Writer
	read()	|	write()	||	 read() |  write()
------------------------------------------------------
FileInputStream|FileOutputStr-||FileReader |FileWriter
		     |am			||		   |PrintWriter
			|			||		   |


FileInputStream fin = new FileInputStream("abc.txt");





------------------------------------














	Flying					Landing
	|fly();<--declared			|land(); <-- declaration
	-------------------------------
				|
			    Flight
				| void fly() { .... } <--definitions[mandatory]
				| void land(){ .... } <--definitions[mandatory]
				|
	------------------------------------
	|			|				|	
	| Firing		| Transporting		|  Ticketing
	|	|fire();	|  |transport();	|	| issueTickets();
FlighterFlight    CargoFlight		CommercialFlight


2nd implementation of Flying and Landing

	Flying					Landing
	|fly();<--declared			|land(); <-- declaration
	-------------------------------
				|
			   Bird 
				| void fly() { .... } <--definitions[mandatory]
				| void land(){ .... } <--definitions[mandatory]
				|
	------------------------------------
	|			|				|
	| ?			| ?				| ?	
	| |			| |				| |
     Hen            Parrot		    Eagle


3rd implementation of Flying and Landing

	Flying					Landing
	|fly();<--declared			|land(); <-- declaration
	-------------------------------
				|
			  Insect 
				| void fly() { .... } <--definitions[mandatory]
				| void land(){ .... } <--definitions[mandatory]
				|
	------------------------------------
	|			|				|
	| ?			| ?				| ?	
	| |			| |				| |
     Bee            DragonFly		    Beetle

----------------

select * from emp where job='SALESMAN';


SelectWhereTest.java

entity-> Employee 
	    structure of the emp table is considered
		while designing the Employee class





1. jdbc - you have to write the 
		jdbc code manually

		Java ----jdbc-code--> Database
			1. load the driver, connect
			2. make the statement
			3. fire the query
			4. process the result if any

OOAD

"	Design PATTERN
		23 patterns "

DAO design pattern

	1	 2		3
	Dept, DeptDAO, DeptDAOImpl
	Emp   EmpDAO	EmpDAOImpl
	Cust  CustDAO	CustDAOImpl
	..
	..
	..

	pojo  poji     pojiimpl
	|	   |			|
	fields CRUD	CRUD developed
	as per		"insert into" dept "values.."
	the 			"select * from" 
	table

	Dept d = new Dept()
	fillup the d with setters

	and invoke the method of PojiImpl

	DeptDAO dao = new DeptDAOImpl();
	dao.insertDepartment(d);

	pojo			table
	Department --> dept

hibernate
	Department - Department.hbm.xml
				SessionFactory
				Session
				|
			save  get update delete



		insert into ? values ????

	Maven Project
		|
	-------------------------
	|		|		|
	src
	|
----------------
|			|
entity		resources
|@Entity			|
Department	META-INF
|@Id			|
|			|
JpaTest		|
|			persistence.xml <-- settings
EntityManager
	|
	persist
	find
	merge
	remove


			 storing the data
			 of an object
				|
	-----------------------------
		|				|
		file				database
		|				|
	serialization			persistence
						| ORM
						Hibernate/JPA

	Object  relational Mapping
	|		|
	java		database



class Department <--- Entity/Pojo
{
	int departmentNumber; <--field
	String departmentName;
	String departmentLocation;

}

Department deptObj = new Department();
deptObj.settters are invoked...

1. jdbc code written by the developer
2. jdbc hidden inside dao by the developer
3. jpa, jdbc code written by the FRAMEWORK
4. spring jpa
===========================================
			dept <-- table
			-----
	deptno	dname	loc <-- columns
	10		Acc		NY
	20		Research	NJ <-- rows



						




















2. hibernate / JPA


	Java Program			Database
	|
1. Pojo
	i)make the pojo
	as an Entity-> javax.persistence.Entity

jar1 	jar2 	jar3 	jar4
sugar	maida     corn		salt
powder					


	@Entity <-- class level annotation
	class Department {

		@Id <-- field level annotation
		private int departmentNumber;
	}

	ii) declare the
	primary key of
	that entity

2. META-INF/persistence.xml
		7 settings
	4) driver,url, username, password
	3) dialect, show sql, hbm2ddl=update

3. EntityManagerFactory
   EntityManager
   EntityTransaction
	


PK- unique + nn
|
1	2	  3		4
dept dname  loc		<-- parent
------
10   Acc	  NY		x
20
30
40
|
+---------------------------------------+
								|
emp	<--child						|
----								FK-null-duplicate
empno	ename	...		...		deptno/dno/abc/xyz
1010		..						10
1020		..						10
1030		..						10
1040		.						NULL <--null
1050								NULL

@Entity
class Department
{
	@Id
	@Column(name="deptno")
1	int departNumber;
2	String departmentName;
3	String departmentLocation;

4	@OneToMany(mappedBy="department")
	List<Employee>  employees = new ArrayList<Employee>();
}

@Entity
class Employee{
	@Id
	@Column(name="empno");
1	eno
2	ename
3	job

	@ManyToOne
4	@JoinColumn(name="dno");
	Deaprtment department;
}


ALTER TABLE DEPT5
    -> MODIFY LOC VARCHAR(20) CHECK (LOC IN('NY','NJ','NP'));

ALTER TABLE EMP5
    -> ADD CONSTRAINT CHKDNO FOREIGN KEY(DNO) REFERENCES DEPT5(DEPTNO);

create table dept5
    -> (
    ->   deptno int primary key,
    ->   dname varchar(20) not null,
    ->   loc varchar(20) check (loc in('NY','NJ','NP'))
    -> );


create table emp5
    -> (
    ->   empno int primary key,
    ->   ename varchar(20) not null,
    ->   salary int,
    ->   dno int references dept5(deptno)
    -> );



ALTER TABLE DEPT5  DROP COLUMN LOC;





Department dept = new Department(70,'Test','ghansoli');

Employee e1 = new Employee(111,'jacky',5555);
Employee e2 = new Employee(111,'jacky',5555,dept);
Employee e3 = new Employee(111,'jacky',5555,dept);

persist(dept);






============================

1. create a maven project

2. modify the pom.xml as per the dependencies requirement

3. right click on the project
		-> java build path
		-> Libraries
		-> JRE System Library 1.5 --> Edit -> Java 17/19/21
		
4. right click on the project
		-> maven
		-> update project
		-> force update


create table Passport 
(issuedBy varchar(255), 
issuedDate date, 
person_id bigint not null, 
primary key (person_id)) engine=MyISAM

	pass
Hibernate: 
create table Person 
(id bigint not null, 
name varchar(255), 
primary key (id)) engine=MyISAM

	id	name
	1	jim
	2	jane
	3	jack
	
Hibernate: 
alter table Passport 
add constraint FKbn4ik956giujpfuboelv614q9 
foreign key (person_id) references Person (id)

Entity Manager Factory created
Hibernate: 

select 
person0_.id as id1_1_0_, 
person0_.name as name2_1_0_, 

passport1_.passportNumber as passport1_0_1_, 
passport1_.issuedBy as issuedBy2_0_1_, 
passport1_.issuedDate as issuedDa3_0_1_, 
passport1_.person_id as person_i4_0_1_ 

from Person person0_ 
left outer join Passport passport1_ 
on person0_.id=passport1_.person_id 
where person0_.id=?








Spring data jpa
Spring REST
:wq

entity
	Cake
repository
	CakeRepository
			- use test cases
			to verify if the
			above repo is 
			working or not
			C-R-RA-U-D
service
	CakeService
controller
	CakeController

----------
Angular application

Service
CakeComponent
	Enter cake name : 
		Chocolate celebration
	Enter cake price:
		1000
	Enter cake weight:
		1kg
	
	Add Cake <-- button
















